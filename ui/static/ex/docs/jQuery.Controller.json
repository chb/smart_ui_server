C({"name": "jQuery.Controller", "children": [{"name": "jQuery.Controller.static", "shortName": "static", "title": undefined, "hide": false}, {"name": "jQuery.Controller.static.init", "shortName": "function", "title": undefined, "hide": false}, {"name": "jQuery.Controller.static.onDocument", "shortName": "attribute", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype", "shortName": "prototype", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype.setup", "shortName": "function", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype.called", "shortName": "attribute", "title": undefined, "hide": true}, {"name": "jQuery.Controller.prototype.options", "shortName": "attribute", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype.element", "shortName": "attribute", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype.bind", "shortName": "function", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype.delegate", "shortName": "function", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype.update", "shortName": "function", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype.destroy", "shortName": "function", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype.find", "shortName": "function", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype.publish", "shortName": "function", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype.init", "shortName": "function", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype.view", "shortName": "function", "title": undefined, "hide": false}], "inherits": "jQuery.Class", "comment": " Controllers organize event handlers using event delegation. \n If something happens in your application (a user click or a [jQuery.Model|Model] instance being updated), \n a controller should respond to it. \n <h3>Benefits</h3>\n <ul>\n     <li><p><i>Know your code.</i></p>\n     \t\tGroup events and label your html in repeatable ways so it's easy to find your code.</li>\n     <li><p><i>Controllers are inheritable.</i></p>\n         Package, inherit, and reuse your widgets.</li>\n     <li><p><i>Write less.</i></p>\n         Controllers take care of setup / teardown automatically.</li>\n </ul>\n <h3>Example</h3>\n<pre><code class='javascript'>//Instead of:\n$(function(){\n  $('#tabs').click(someCallbackFunction1)\n  $('#tabs .tab').click(someCallbackFunction2)\n  $('#tabs .delete click').click(someCallbackFunction3)\n});\n\n//do this\n$.Controller.extend('Tabs',{\n  click: function(){...},\n  '.tab click' : function(){...},\n  '.delete click' : function(){...}\n})\n$('#tabs').tabs();</code></pre> <h2>Using Controllers</h2>\n <p>A Controller is just a list of functions that get called back when the appropriate event happens.  \n The name of the function provides a description of when the function should be called.  By naming your functions in the correct way,\n Controller recognizes them as an <b>Action</b> and hook them up in the correct way.</p>\n \n <p>The 'hook up' happens when you create a [jQuery.Controller.prototype.setup|new controller instance].</p>\n \n <p>Lets look at a very basic example.  \n Lets say you have a list of todos and a button you want to click to create more.\n Your HTML might look like:</p>\n<pre><code class='html'>&lt;div id='todos'>\n\t&lt;ol>\n\t  &lt;li class=\"todo\">Laundry&lt;/li>\n\t  &lt;li class=\"todo\">Dishes&lt;/li>\n\t  &lt;li class=\"todo\">Walk Dog&lt;/li>\n\t&lt;/ol>\n\t&lt;a id=\"create_todo\">Create&lt;/a>\n&lt;/div></code></pre>To add a mousover effect and create todos, your controller class might look like:\n<pre><code class='javascript'>$.Controller.extend('TodosController',{\n  \".todo mouseover\" : function(el, ev){\n\t  el.css(\"backgroundColor\",\"red\")\n  },\n  \".todo mouseout\" : function(el, ev){\n\t  el.css(\"backgroundColor\",\"\")\n  },\n  \"#create_todo click\" : function(){\n\t  this.find(\"ol\").append(\"&lt;li class='todo'>New Todo&lt;/li>\"); \n  }\n})</code></pre>Now that you've created the controller class, you've got attach the event handlers on the '#todos' div by\ncreating [jQuery.Controller.prototype.init|a new controller instance].  There are 2 ways of doing this.\n<pre><code class='javascript'>//1. Create a new controller directly:\nnew TodosController($('#todos')[0]);\n//2. Use jQuery function\n$('#todos').todos_controller();</code></pre>\nAs you've likely noticed, when the [jQuery.Controller.static.init|controller class is created], it creates helper\nfunctions on [jQuery.fn]. The \"#todos\" element is known as the <b>delegated</b> element.\n\n<h3>Action Types</h3>\n<p>Controller uses actions to match function names and attach events.  \nBy default, Controller will match [jQuery.Controller.Action.Event|Event] and [jQuery.Controller.Action.Subscribe|Subscribe] actions. \nTo match other actions, steal their plugins.</p>\n<table>\n\t<tr>\n\t\t<th>Action</th><th>Events</th><th>Example</th><th>Description</th>\n\t</tr>\n\t<tbody  style=\"font-size: 11px;\">\n\t<tr>\n\t\t<td>[jQuery.Controller.Action.Event Event]</td>\n\t\t<td>change click contextmenu dblclick keydown keyup keypress mousedown mousemove mouseout mouseover mouseup reset \n\t\t\twindowresize resize windowscroll scroll select submit dblclick focus blur load unload ready hashchange</td>\n\t\t<td>\"a.destroy click\"</td>\n\t\t<td>Matches standard DOM events</td>\n\t</tr>\n\t<tr>\n\t\t<td>[jQuery.Controller.Action.Subscribe Subscribe]</td>\n\t\t<td>Any <a href=\"http://www.openajax.org/index.php\">openajax</a> event</td>\n\t\t<td>\"todos.*.create subscribe\"</td>\n\t\t<td>Subscribes this action to OpenAjax hub.</td>\n\t</tr>\n\t<tr>\n\t\t<td>[jQuery.Controller.Action.Drag Drag]</td>\n\t\t<td>draginit dragend dragmove</td>\n\t\t<td>\".handle draginit\"</td>\n\t\t<td>Matches events on a dragged object</td>\n\t</tr>\n\t<tr>\n\t\t<td>[jQuery.Controller.Action.Drop Drop]</td>\n\t\t<td>dropover dropon dropout dropinit dropmove dropend</td>\n\t\t<td>\".droparea dropon\"</td>\n\t\t<td>Matches events on a droppable object</td>\n\t</tr>\n\t<tr>\n\t\t<td>[jQuery.Controller.Action.Lasso Lasso]</td>\n\t\t<td>lassoinit lassoend lassomove</td>\n\t\t<td>\"#lassoarea lassomove\"</td>\n\t\t<td>Allows you to lasso elements.</td>\n\t</tr>\n\t<tr>\n\t\t<td>[jQuery.Controller.Action.Selectable Selectable]</td>\n\t\t<td>selectover selected selectout selectinit selectmove selectend</td>\n\t\t<td>\".selectable selected\"</td>\n\t\t<td>Matches events on elements that can be selected by the lasso.</td>\n\t</tr>\n\t</tbody>\n</table>\n\n<h3>Callback Parameters</h3>\nFor most actions, the first two parameters are always:\n<ul>\n\t<li>el - the jQuery wrapped element.</li>\n\t<li>ev - the jQuery wrapped DOM event.</li>\n</ul>\n<pre><code class='javascript'>\".something click\" : function(el, ev){\n   el.slideUp()\n   ev.stopDelegation();  //stops this event from delegating to any other\n\t\t\t\t\t\t // delegated events for this delegated element.\n   ev.preventDefault();  //prevents the default action from happening.\n   ev.stopPropagation(); //stops the event from going to other elements.\n}</code></pre>\nIf the action provides different parameters, they are in each action's documentation.\n\n\n<h2>onDocument Controllers</h2>\n<p>Sometimes, you want your controllers to delegate from the document or documentElement.  Typically this is\ndone in less complex applications where you know there will only be a single instance of the controller\non the page.</p>\n<p>The advantage of onDocument Controllers is that they can be automatically attached to the document for you.</p>\nTo automatically attach to the document, add \"onDocument: true\" to your controller as follows:\n<pre><code class='javascript'>$.Controller.extend('TodosController',\n{onDocument: true},\n{\n  \".todo mouseover\" : function(el, ev){\n\t  el.css(\"backgroundColor\",\"red\")\n  },\n  \".todo mouseout\" : function(el, ev){\n\t  el.css(\"backgroundColor\",\"\")\n  },\n  \"#create_todo click\" : function(){\n\t  this.find(\"ol\").append(\"&lt;li class='todo'>New Todo&lt;/li>\"); \n  }\n})</code></pre>\n \n", "shortName": "Class", "tags": ["core"]})