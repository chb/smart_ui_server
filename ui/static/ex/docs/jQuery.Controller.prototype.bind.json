C({"name": "jQuery.Controller.prototype.bind", "shortName": "Function", "ret": {"description": "The id of the binding in this._bindings\n\t ", "type": "Integer"}, "params": {"el": {"description": "", "type": "", "optional": false, "order": 0, "name": "el"}, "eventName": {"description": "The event to listen for.", "type": "String", "optional": false, "order": 1, "name": "eventName"}, "func": {"description": "A callback function or the String name of a controller function.  If a controller\n function name is given, the controller function is called back with the bound element and event as the first\n and second parameter.  Otherwise the function is called back like a normal bind.", "type": "Function|String", "optional": false, "order": 2, "name": "func"}, "element": {"order": 3, "description": "element the element to be bound", "name": "element", "type": "HTMLElement|jQuery.fn", "optional": true, "default": "this.element"}}, "comment": "Bind attaches event handlers that will be removed when the controller is removed.  \n This is a good way to attach to an element not in the controller's element.\n <br/>\n <h3>Examples:</h3>\n<pre><code class='javascript'> init : function(){\n    // calls somethingClicked(el,ev)\n    this.bind('click','somethingClicked') \n \n    // calls function when the window is clicked\n    this.bind(window, 'click', function(ev){\n      //do something\n    })\n },\n somethingClicked : function(el, ev){\n \t\t\n }</code></pre>"})