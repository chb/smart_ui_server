C({"plugin": "controller/view", "name": "jQuery.Controller.prototype.view", "shortName": "Function", "ret": {"description": "the rendered result of the view.", "type": "String"}, "params": {"view": {"description": "", "type": "", "optional": false, "order": 0, "name": "view"}, "data": {"description": "", "type": "", "optional": false, "order": 1, "name": "data"}, "myhelpers": {"description": "", "type": "", "optional": false, "order": 2, "name": "myhelpers"}, "optional1": {"order": 3, "description": "view The view you are going to render.  If a view isn't explicity given\n this function will try to guess at the correct view as show in the example code above.", "name": "optional1", "type": "String", "optional": true}, "optional2": {"order": 4, "description": "data data to be provided to the view.  If not present, the controller instance \n is used.", "name": "optional2", "type": "Object", "optional": true}, "optional3": {"order": 5, "description": "myhelpers an object of helpers that will be available in the view.  If not present\n this controller class's \"Helpers\" property will be used.\n\n ", "name": "optional3", "type": "Object", "optional": true}}, "comment": " Renders a View template with the controller instance. If the first argument\n is not supplied, \n it looks for a view in /views/controller_name/action_name.ejs.\n If data is not provided, it uses the controller instance as data.\n<pre><code class='javascript'> TasksController = $.Controller.extend('TasksController',{\n   click : function(el){\n     // renders with views/tasks/click.ejs\n     el.html( this.view() ) \n     // renders with views/tasks/under.ejs\n     el.after( this.view(\"under\", [1,2]) );\n     // renders with views/shared/top.ejs\n     el.before( this.view(\"shared/top\", {phrase: \"hi\"}) );\n   }\n })</code></pre>", "tags": ["view"]})