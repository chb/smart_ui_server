C({"name": "jQuery.View", "children": [{"name": "jQuery.View.static", "shortName": "static", "title": undefined, "hide": false}, {"name": "jQuery.View.static.hookup", "shortName": "function", "title": undefined, "hide": false}, {"name": "jQuery.View.static.cached", "shortName": "attribute", "title": undefined, "hide": false}, {"name": "jQuery.View.static.cache", "shortName": "attribute", "title": undefined, "hide": false}, {"name": "jQuery.View.static.register", "shortName": "function", "title": undefined, "hide": false}, {"name": "jQuery.View.static.ext", "shortName": "attribute", "title": undefined, "hide": false}], "comment": " View provides a uniform interface for using templates in JavaScriptMVC.  When templates \n [jQuery.View.static.register register] themselves, you are able to:\n <ul>\n \t<li>Compress your views with [steal.static.views].</li>\n  <li>Use views with jQuery extensions [jQuery.fn.after after], [jQuery.fn.append append],\n  \t[jQuery.fn.before before], [jQuery.fn.html html], [jQuery.fn.prepend prepend],\n      [jQuery.fn.replace replace], [jQuery.fn.text text] like:\n<pre><code class='javascript'>      $('.foo').html(\"//path/to/view.ejs\",{})</code></pre>  </li>\n  <li>\n  \tUse the [jQuery.Controller.prototype.view controller/view] plugin.\n  </li>\n  <li>\n  \tHookup plugins on elements after render.\n  </li>\n  \n </ul>\n \n <h2>Supported Templates</h2>\n <ul>\n \t<li>[jQuery.View.EJS EJS] - provides an ERB like syntax: <code>&lt;%= %&gt;</code></li>\n  <li>[Jaml] - A functional approach to JS templates.</li>\n  <li>[Micro] - A very lightweight template similar to EJS.</li>\n </ul>\n", "shortName": "Constructor", "ret": {"description": "The result of the view.\n\t ", "type": "String"}, "params": {"url": {"description": "", "type": "String", "optional": false, "order": 0, "name": "url"}, "data": {"description": "", "type": "Object", "optional": false, "order": 1, "name": "data"}, "helpers": {"description": "", "type": "Object", "optional": true, "order": 2, "name": "helpers"}}})