C({"name": "jQuery.Controller.prototype.delegate", "shortName": "Function", "ret": {"description": "The id of the binding in this._bindings\n\t ", "type": "Integer"}, "params": {"element": {"description": "element", "type": "HTMLElement|jQuery.fn", "optional": true, "order": 0, "name": "element", "default": "this.element"}, "selector": {"description": "the css selector", "type": "String", "optional": false, "order": 1, "name": "selector"}, "eventName": {"description": "", "type": "String", "optional": false, "order": 2, "name": "eventName"}, "func": {"description": "A callback function or the String name of a controller function.  If a controller\n function name is given, the controller function is called back with the bound element and event as the first\n and second parameter.  Otherwise the function is called back like a normal bind.", "type": "Function|String", "optional": false, "order": 3, "name": "func"}}, "comment": "Delegate will delegate on an elememt and will be undelegated when the controller is removed.\n This is a good way to delegate on elements not in a controller's element.<br/>\n <h3>Example:</h3>\n<pre><code class='javascript'> // calls function when the any 'a.foo' is clicked.\n this.delegate(document.documentElement,'a.foo', 'click', function(ev){\n   //do something\n })</code></pre>"})